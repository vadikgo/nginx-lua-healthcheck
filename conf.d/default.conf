# nginx.vh.default.conf  --  docker-openresty
#
# This file is installed to:
#   `/etc/nginx/conf.d/default.conf`
#
# It tracks the `server` section of the upstream OpenResty's `nginx.conf`.
#
# This config (and any other configs in `etc/nginx/conf.d/`) is loaded by
# default by the `include` directive in `/usr/local/openresty/nginx/conf/nginx.conf`.
#
# See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files
#

lua_package_path '/etc/nginx/conf.d/lua-resty-http/lib/?.lua;/etc/nginx/conf.d/json.lua/?.lua;;';

server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/local/openresty/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/local/openresty/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           /usr/local/openresty/nginx/html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
    location /healthcheck {
        access_log off;
        # resolver kube-dns.kube-system.svc.cluster.local;
        resolver 8.8.8.8;
        # MIME type determined by default_type:
        default_type 'application/json';

        lua_socket_connect_timeout 60s;
        content_by_lua_block {
          function get_req(url)
          -- Get the URL and return an HTTP code as a string or an error message
            local httpc = require("resty.http").new()
            local res, err = httpc:request_uri(url, {method="GET"})
            if res then
              if (res.status == 301 or res.status == 302) then
                return get_req(res.headers["Location"])
              end
              if (res.status == 200 or res.status == 429) then
                return "OK"
              else
                return string.format("HTTP %i", res.status)
              end
            else
              return err
            end
          end
          json = require "json"
          local hosts = json.decode('{"http-google":"http://google.com", "sber":"http://sberbank.ru", "localhost": "http://127.0.0.1"}')
          local out_lines = {}
          local success = true
          for name, url in pairs(hosts) do
            out_lines[name] = get_req(url)
            if success then
              success = (out_lines[name] == "OK")
            end
          end
          if success then
            ngx.status = 200
          else
            ngx.status = 500
          end
          ngx.say(json.encode(out_lines))
        }
    }
}

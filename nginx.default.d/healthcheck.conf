location /healthcheck-targets {
    access_log off;
    default_type application/json;
    return 200 '{"http-google1":"http://google.com", "http-google2":"http://google.com", "http-google3":"http://google.com","sber1":"http://sberbank.ru", "sber2":"http://sberbank.ru", "sber3":"http://sberbank.ru", "ya1": "https://ya123.ru", "ya2": "http://ya.ru", "ya3": "http://ya.ru"}';
}
location /healthcheck {
    access_log off;
    # resolver kube-dns.kube-system.svc.cluster.local;
    resolver 8.8.8.8;
    # MIME type determined by default_type:
    default_type 'application/json';

    content_by_lua_block {
        function get_req(url)
        -- Get the URL and return an HTTP code as a string or an error message
        local httpc = require("resty.http").new()
        httpc:set_timeout(5000)
        local res, err = httpc:request_uri(url, {method="HEAD", ssl_verify=false})
        if res then
            if (res.status == ngx.HTTP_MOVED_PERMANENTLY or res.status == ngx.HTTP_MOVED_TEMPORARILY) then
            return get_req(res.headers["Location"])
            end
            if (res.status == ngx.HTTP_OK or res.status == ngx.HTTP_TOO_MANY_REQUESTS) then
            return "OK"
            else
            return string.format("HTTP %i", res.status)
            end
        else
            return err
        end
        end
        local httpc = require("resty.http").new()
        local res, err = httpc:request_uri(string.format('http://127.0.0.1:%s/healthcheck-targets', ngx.var.server_port), {method="GET", ssl_verify=false})
        if (res and res.status == ngx.HTTP_OK) then
        local json = require ("luarocks.vendor.dkjson")
        local hosts = json.decode(res.body)
        local out_lines = {}
        success = true
        for name, url in pairs(hosts) do
            out_lines[name] = get_req(url)
            if success then
                success = (out_lines[name] == "OK")
            end
        end
        if success then
            ngx.status = ngx.HTTP_OK
        else
            ngx.status = ngx.HTTP_SERVICE_UNAVAILABLE
        end
        ngx.say(json.encode(out_lines, {indent=true}))
        else
        ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
        end
    }
}
